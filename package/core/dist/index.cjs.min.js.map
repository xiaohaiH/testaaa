{"version":3,"file":"index.cjs.min.js","sources":["../use/constant.ts","../use/wrapper/props.ts","../utils/index.ts","../use/assist.ts","../use/plain/index.ts","../use/share.ts","../use/plain/props.ts","../use/tree/index.ts","../use/tree/props.ts","../use/wrapper/index.ts"],"sourcesContent":["import { version, type Ref } from 'vue-demi';\n\n/** 判断是否是 2.7.* 版本, 监听生命周期需对该版本做处理 */\nexport const IS_COMPOSITION_VERSION = version.slice(0, 3) === '2.7';\n\n/** 容器注入的 key */\nexport const provideKey = 'condition-wrapper';\n\n/** 容器注入值的类型 */\nexport interface ProvideValue {\n    /**\n     * 是否实时触发\n     */\n    realtime: Ref<boolean | undefined>;\n    /**\n     * 子组件需主动注册组件, 否则不会生效\n     * @param {CommonMethod} config 提供父组件校验, 重置等方法\n     *\n     * @returns {() => void} 取消注册 - 默认会自动取消, 如果是异步任务内注册, 需自己手动取消\n     */\n    register(config: CommonMethod): () => void;\n    /**\n     * 子组件通知父级更新 query 中的值 - 静默修改, 不触发搜索事件\n     * @param {string} field 更新的字段\n     * @param {*} value 更新的值\n     */\n    updateQueryValue(field: string, value: any): void;\n    /**\n     * 子组件内部值发生了变动, 由父级决定是否触发搜索事件(实时搜索时需要区分这两种方式)\n     */\n    insetSearch(): void;\n    /**\n     * 提供给组件内部的直接触发到外部的搜索事件\n     */\n    search(): Promise<string | void>;\n    /** 删除内部无引用的字段 */\n    removeUnreferencedField(field: string): void;\n}\nexport function defineProvideValue<T extends ProvideValue>(option: T) {\n    return option;\n}\n\n/** 子组件需暴露出来的公共属性 */\nexport interface CommonMethod {\n    /** 重置 */\n    reset(): void;\n    /** 更新父级中 query 的值 */\n    updateWrapperQuery(): void;\n    /** 校验方法 */\n    validator?(query: Record<string, string>): Promise<any> | any;\n    /** 获取该组件拼接的参数 */\n    getQuery(): Record<string, any>;\n}\nexport function defineCommonMethod<T extends CommonMethod>(option: T): T {\n    return option;\n}\n","import { PropType } from 'vue-demi';\n\n/** 条件容器 props */\nexport const wrapperProps = {\n    /** 是否在数据发生变动后实时触发搜索事件 */\n    realtime: { type: Boolean as PropType<boolean>, default: undefined },\n    /** 是否在数据源发生改变后触发一次搜索事件 */\n    searchAtDatumChanged: { type: Boolean as PropType<boolean>, default: undefined },\n    /** 回填信息 */\n    backfill: { type: Object as PropType<Record<string, any>> },\n    /** 校验失败时产生的提示 */\n    toast: { type: Function as PropType<(msg: string) => void>, default: undefined },\n} as const;\n","import { markRaw, VNode } from 'vue-demi';\n\n/**\n * 空值转为提供的默认值\n * @param {*} val 值为空时转为默认值\n * @param {*} defaultVal\n */\nexport function emptyToValue<T extends unknown>(val: any, defaultVal: T) {\n    if (Array.isArray(val)) return val.filter(Boolean).length ? val : defaultVal;\n    return typeof val === 'number' ? val : val || defaultVal;\n}\n\n/**\n * 获取指定层级的父级(包括自身)\n * @param {Record<string, any>[]} data 数据源\n * @param {(item) => boolean} cb 当前数据项是否匹配\n */\nexport function getChained<T extends Record<string, any>>(\n    data: T[],\n    cb: (item: T) => boolean,\n    childrenKey = 'children',\n): T[] {\n    for (const item of data) {\n        if (cb(item)) {\n            return [item];\n        } else if (item[childrenKey]?.length) {\n            const r = getChained(item[childrenKey], cb);\n            if (r.length) {\n                r.unshift(item);\n                return r;\n            }\n        }\n    }\n    return [];\n}\n\n/**\n * 获取渲染节点\n * @param {string | Object | Function} node 需渲染元素\n */\nexport function getNode(node: string | ((...args: any[]) => VNode) | VNode, ...args: any[]) {\n    return typeof node === 'function' ? node(...args) : typeof node === 'string' ? node : markRaw(node);\n}\n","import { ref, watch, onBeforeUnmount, ExtractPropTypes, nextTick, computed } from 'vue-demi';\nimport { CommonMethod } from './constant';\nimport { commonProps } from './share';\n\n/** 获取条件的初始值 */\nexport function useInitialValue<T extends ExtractPropTypes<Readonly<typeof commonProps>>>(props: T) {\n    const setValue = ref<any>();\n    const a = computed({\n        set(value: any) {\n            setValue.value = value;\n        },\n        get() {\n            return setValue.value === undefined\n                ? props.defaultValue !== undefined\n                    ? typeof props.defaultValue === 'function'\n                        ? props.defaultValue(props.query, props.backfill)\n                        : props.defaultValue\n                    : undefined\n                : setValue.value;\n        },\n    });\n    return a;\n}\n\n/**\n * 获取当前组件的显示和隐藏状态\n */\nexport function useDisplay<T extends ExtractPropTypes<Readonly<typeof commonProps>>>(props: T, option: CommonMethod) {\n    const insetDisabled = ref(typeof props.disabled === 'boolean' ? props.disabled : false);\n    const insetHide = ref(typeof props.hide === 'boolean' ? props.hide : false);\n    const getOption = () => ({ query: props.query, backfill: props.backfill, option });\n    const cb = () => {\n        if (typeof props.hide === 'function') {\n            const currentValue = insetHide.value;\n            const newValue = props.hide(getOption());\n            if (currentValue !== newValue) {\n                insetHide.value = props.hide(getOption());\n            }\n        } else if (typeof props.disabled === 'function') {\n            const currentValue = insetDisabled.value;\n            const newValue = props.disabled(getOption());\n            if (currentValue !== newValue) {\n                insetDisabled.value = props.disabled(getOption());\n            }\n        }\n    };\n    let isChanged = false;\n    let listeners = [\n        watch(() => props.query, cb, { immediate: true, deep: true }),\n        watch(\n            () => [props.disabled, props.hide],\n            (val, val2) => {\n                if (val[0] !== val2[0]) {\n                    insetDisabled.value = typeof val[0] === 'boolean' ? val[0] : false;\n                    typeof val[0] === 'function' && (isChanged = true);\n                }\n                if (val[1] !== val2[1]) {\n                    insetHide.value = typeof val[1] === 'boolean' ? val[1] : false;\n                    typeof val[1] === 'function' && (isChanged = true);\n                }\n                cb();\n                isChanged = false;\n            },\n        ),\n    ];\n    onBeforeUnmount(() => (listeners.forEach((o) => o()), (listeners = [])));\n    return { insetDisabled, insetHide };\n}\n\n/**\n * 转换当前事件循环内更新标识\n * @param {boolean} initialValue 初始状态\n */\nexport function useDisableInCurrentCycle(initialValue = true) {\n    /** 是否允许改变 */\n    const flag = ref(initialValue);\n    /** 禁止改变 */\n    const updateFlag = () => {\n        flag.value = !initialValue;\n        nextTick(() => {\n            flag.value = initialValue;\n        });\n    };\n    return { flag, updateFlag };\n}\n","import { ExtractPropTypes, computed, inject, onBeforeUnmount, PropType, ref, watch, watchEffect } from 'vue-demi';\nimport { emptyToValue } from '../../utils/index';\nimport { CommonMethod, defineCommonMethod, provideKey, ProvideValue } from '../constant';\nimport { useDisplay, useDisableInCurrentCycle, useInitialValue } from '../assist';\nimport { plainProps } from './props';\n\n/** 外部需传递的 props */\nexport type PlainProps = ExtractPropTypes<typeof plainProps>;\n\n/** 空值转字符串(去除空值不一致导致 formItem.rules 校验) */\nfunction emptyValue2Str(val?: string | number | undefined | null | any[]) {\n    return val?.toString() ?? '';\n}\n\n/** 封装扁平组件必备的信息 */\nexport function usePlain(props: PlainProps) {\n    /** 容器注入值 */\n    const wrapper = inject<ProvideValue>(provideKey);\n    /** 初始值(重置时回填的值) */\n    const initialValue = useInitialValue(props);\n    /** 初始是否存在回填值 */\n    const initialBackfillValue =\n        props.backfill &&\n        (props.fields?.length\n            ? // 防止回填值不存在时产生一个空数组(undefined[])\n              props.fields.map((key) => props.backfill![key]).filter(Boolean)\n            : props.backfill[props.field]);\n    /** 当前选中值 */\n    const checked = ref<string | string[]>(\n        initialBackfillValue ||\n            (props.defaultValue !== undefined ? initialValue.value : props.multiple ? [] : '')\n                // 防止数组引用导致默认值发生改变\n                .slice(),\n    );\n    /** 远程获取的数据源 */\n    const remoteOption = ref<Record<string, any>[]>([]);\n    /** 渲染的数据源(远程数据源 > 本地数据源) */\n    const finalOption = computed(() => (remoteOption.value.length ? remoteOption.value : props.options));\n    const getQuery = () => {\n        if (props.customGetQuery) return props.customGetQuery(checked.value, emptyToValue, props);\n        return props.multiple && props.fields\n            ? props.fields.reduce(\n                  (p, k, i) => ((p[k] = emptyToValue(checked.value?.[i], props.emptyValue)), p),\n                  {} as Record<string, any>,\n              )\n            : { [props.field]: emptyToValue(checked.value, props.emptyValue) };\n    };\n    // 防止触发搜索时, query 产生变化内部重复赋值\n    const { flag: realtimeFlag, updateFlag: updateRealtimeFlag } = useDisableInCurrentCycle();\n    // 防止触发搜索时, backfill 产生变化内部重复赋值\n    const { flag: backfillFlag, updateFlag: updateBackfillFlag } = useDisableInCurrentCycle();\n\n    const option = defineCommonMethod({\n        reset() {\n            const { multiple } = props;\n            updateRealtimeFlag();\n            updateBackfillFlag();\n            checked.value = (props.resetToInitialValue && initialValue.value?.slice()) || (multiple ? [] : '');\n        },\n        updateWrapperQuery() {\n            updateRealtimeFlag();\n            wrapper && Object.entries(getQuery()).forEach(([k, v]) => wrapper.updateQueryValue(k, v));\n        },\n        get validator() {\n            return props.validator;\n        },\n        getQuery,\n    });\n\n    wrapper?.register(option);\n    const { insetDisabled, insetHide } = useDisplay(props, option);\n    /** 不存在回填值且存在默认值时更新父级中的值 */\n    if (!initialBackfillValue && props.defaultValue) {\n        option.updateWrapperQuery();\n    }\n\n    const unwatchs: (() => void)[] = [];\n    onBeforeUnmount(() => unwatchs.forEach((v) => v()));\n\n    // 提交字段发生改变时, 删除原有字段并更新最新值\n    unwatchs.push(\n        watch(\n            () => props.field,\n            (val, oldVal) => {\n                val !== oldVal && wrapper?.removeUnreferencedField(oldVal);\n                option.updateWrapperQuery();\n            },\n        ),\n    );\n    // 实时值发生变化时触发更新 - 共享同一个字段\n    unwatchs.push(\n        watch(\n            () =>\n                [\n                    props.fields || props.field,\n                    props.fields ? props.fields.map((k) => props.query[k]).filter(Boolean) : props.query[props.field],\n                ] as const,\n            // [props.field, props.query[props.field]] as const,\n            ([_field, val], [__field]) => {\n                const _val = props.backfillToValue(val, _field, props.query);\n                // 仅在值发生变化时同步 忽视空值不一致的问题\n                if (_field.toString() !== __field.toString() || emptyValue2Str(_val) === emptyValue2Str(checked.value))\n                    return;\n                if (!realtimeFlag.value) return;\n                checked.value = _val;\n            },\n        ),\n    );\n    // 回填值发生变化时触发更新\n    unwatchs.push(\n        watch(\n            () =>\n                [\n                    props.fields || props.field,\n                    props.fields\n                        ? props.fields.map((k) => props.backfill?.[k]).filter(Boolean)\n                        : props.backfill?.[props.field],\n                ] as const,\n            ([_field, val], [__field]) => {\n                // 存在回填值时回填, 不存在时不做改动\n                const _val = props.backfillToValue(val, _field, props.backfill);\n                if (_field.toString() !== __field.toString() || emptyValue2Str(_val) === emptyValue2Str(checked.value))\n                    return;\n                updateBackfillFlag();\n                updateCheckedValue(_val);\n            },\n        ),\n    );\n    // 存在依赖项\n    unwatchs.push(\n        watch(\n            () =>\n                [\n                    props.depend,\n                    props.dependFields,\n                    (props.dependFields &&\n                        ([] as string[])\n                            .concat(props.dependFields)\n                            .map((k) => props.query?.[k])\n                            .join(',')) ||\n                        '',\n                ] as const,\n            ([_depend, _dependFields, val], [__depend, __dependFields, oldVal]) => {\n                if (!backfillFlag.value) return;\n                if (val === oldVal) return;\n                getOption('depend');\n                // 更新依赖条件时不做改动\n                if (_depend !== __depend || _dependFields?.toString() !== __dependFields?.toString()) return;\n                if (checked.value === undefined || checked.value.toString() === '') return;\n                updateCheckedValue(props.multiple ? [] : '');\n            },\n        ),\n    );\n    unwatchs.push(watch(() => props.getOptions, getOption.bind(null, 'initial'), { immediate: true }));\n\n    /** 获取数据源发生变化事件 */\n    function getOption(trigger: 'initial' | 'depend') {\n        props.getOptions?.(\n            (data) => {\n                const _checked = checked.value;\n                // 重置 checked, 防止增加 option 后, select 值没更新的问题\n                checked.value = undefined as any;\n                remoteOption.value = data || [];\n                checked.value = _checked;\n            },\n            props.query || {},\n            {\n                trigger,\n                change: (value: any, isInitial?: boolean) => {\n                    isInitial && (initialValue.value = value);\n                    change(value);\n                },\n                search: (value: any, isInitial?: boolean) => {\n                    isInitial && (initialValue.value = value);\n                    updateCheckedValue(value);\n                    wrapper?.search();\n                },\n            },\n        );\n    }\n    /**\n     * 更新选中值(父级也同步更改)\n     * @param {string | string[]} value 待更改的值\n     */\n    function updateCheckedValue(value: string | string[]) {\n        if (value === checked.value) return;\n        checked.value = value;\n        option.updateWrapperQuery();\n    }\n    /**\n     * 更新选中值并触发内部搜索事件\n     * @param {string | string[]} value 待更改的值\n     */\n    function change(value: string | string[]) {\n        updateCheckedValue(value);\n        wrapper?.insetSearch();\n    }\n\n    return {\n        wrapper,\n        option,\n        checked,\n        getQuery,\n        insetDisabled,\n        insetHide,\n        finalOption,\n        updateCheckedValue,\n        change,\n        reset: option.reset,\n    };\n}\n","import { type PropType } from 'vue-demi';\nimport { type CommonMethod } from './constant';\nimport { type emptyToValue as EmptyToValue } from '../utils/index';\n\n/** 隐藏元素 */\nexport type HideOption =\n    | boolean\n    | ((query: {\n          /** 实时 query */\n          query: Record<string, any>;\n          /** 回填值 query */\n          backfill?: Record<string, any>;\n          /** 当前组件暴露给父级的选项 */\n          option: CommonMethod;\n      }) => any);\n\n/** 获取远程数据源 */\nexport interface GetOptions {\n    (\n        /** 数据执行后的回调 */\n        cb: (data: Record<string, any>[]) => void,\n        /** 当前 query 对象 */\n        query: Record<string, any>,\n        /** 额外的配置项 */\n        option: TriggerOption,\n    ): any;\n}\n\n/** 条件值可能的类型 */\nexport type ValueType = string | string[];\n\n/** 改变当前条件值触发方式 */\nexport interface TriggerOption {\n    /**\n     * 触发来源\n     * @enum {('initial'|'depend')} initial(初始化), depend(依赖项改变)\n     */\n    trigger: string;\n    /**\n     * 仅改变内部的值, 不触发搜索事件\n     * @param {*} value 需改变的值\n     * @param {boolean} [updateInitialValue] 是否将该值作为初始值(重置时使用)\n     */\n    change(value: any, updateInitialValue?: boolean): void;\n    /**\n     * 触发搜索事件\n     * @param {*} value 需改变的值\n     * @param {boolean} [updateInitialValue] 是否将该值作为初始值(重置时使用)\n     */\n    search(value: any, updateInitialValue?: boolean): void;\n}\n\n/** 自定义返回字段 */\nexport type GetQuery = (\n    value: any | any[],\n    emptyToValue: typeof EmptyToValue,\n    props: Record<string, any>,\n) => Record<string, any>;\n\n/** 公共 props */\nexport const commonProps = {\n    /** 提交的字段 */\n    field: { type: String as PropType<string>, required: true },\n    /** 当前条件对象 - 实时变化 */\n    query: { type: Object as PropType<Record<string, any>>, required: true },\n    /** 回填值的对象 - 非实时变化 */\n    backfill: { type: Object as PropType<Record<string, any>> },\n    /** 禁用状态 */\n    disabled: { type: [Boolean, Function] as PropType<HideOption> },\n    /** 是否隐藏 -> 如果是函数, 需传递依赖项, 可根据依赖项动态隐藏 */\n    hide: { type: [Boolean, Function] as PropType<HideOption> },\n    /** 是否依赖其它字段 */\n    depend: { type: Boolean as PropType<boolean> },\n    /** 依赖字段 */\n    dependFields: { type: [String, Array] as PropType<string | string[]> },\n    /** 重置时是否置为初始值 */\n    resetToInitialValue: { type: [Boolean] as PropType<boolean> },\n    /** 空置时提交的值 - 默认置为 undefined */\n    emptyValue: { type: [String, Number, null, undefined] as PropType<undefined | null | string | number> },\n    /** 校验函数, 返回字符串不通过, 会触发提示 - 提交时触发 */\n    validator: {\n        type: [Function] as PropType<\n            ((query: Record<string, any>) => any) | ((query: Record<string, any>) => Promise<any>)\n        >,\n    },\n    /** 自定义返回字段 */\n    customGetQuery: { type: Function as PropType<GetQuery> },\n    /** 设置默认值 */\n    defaultValue: {\n        type: [String, Array, Function] as PropType<\n            ValueType | ((query: Record<string, any>, backfill?: Record<string, any>) => ValueType)\n        >,\n    },\n} as const;\n","import { PropType } from 'vue-demi';\nimport { commonProps, type GetOptions } from '../share';\n\n/** 扁平条件类 props */\nexport const plainProps = {\n    ...commonProps,\n    /** 字段集(多选时, 每个下标对应的字段可能不一样) */\n    fields: { type: [Array] as PropType<string[]> },\n    /** 多字段时转换成选中值 */\n    backfillToValue: {\n        type: Function as PropType<\n            (values: string | string[], fields: string | string[], backfill?: Record<string, any>) => string | string[]\n        >,\n        default: (v: any) => v,\n    },\n    /** 是否多选 */\n    multiple: { type: Boolean as PropType<boolean>, default: undefined },\n    /** 数据源 */\n    options: { type: Array as PropType<Record<string, any>[]>, default: () => [] },\n    /** 动态获取数据源 */\n    getOptions: { type: Function as PropType<GetOptions> },\n} as const;\n","import { computed, ExtractPropTypes, inject, onBeforeUnmount, PropType, ref, watch, nextTick } from 'vue-demi';\nimport { emptyToValue, getChained } from '../../utils/index';\nimport { defineCommonMethod, provideKey, ProvideValue } from '../constant';\nimport { useDisplay, useDisableInCurrentCycle, useInitialValue } from '../assist';\nimport { treeProps } from './props';\n\n/** 选中值类型 */\ntype ValueType = string | number | null | undefined;\n/** 外部需传递的 props */\nexport type TreeProps = ExtractPropTypes<typeof treeProps>;\n\n/** 空值转字符串(去除空值不一致导致 formItem.rules 校验) */\nfunction emptyValue2Str(val?: string | number | undefined | null | any[]) {\n    return val?.toString() ?? '';\n}\n\n/** 封装 tree 组件必备的信息 */\nexport function useTree(props: TreeProps) {\n    /** 容器注入值 */\n    const wrapper = inject<ProvideValue>(provideKey);\n    /** 初始值(重置时回填的值) */\n    const initialValue = useInitialValue(props);\n    /** 当前选中值 */\n    const checked = ref<ValueType[]>([]);\n    /** 远程获取的数据源 */\n    const remoteOption = ref<Record<string, any>[]>([]);\n    /** 渲染的数据源(远程数据源 > 本地数据源) */\n    const finalOption = computed(() => (remoteOption.value.length ? remoteOption.value : props.options));\n    /** 获取当前条件所拥有的值 */\n    const getQuery = () => {\n        // 未初始化且不存在默认值时不返回查询值\n        if (!sourceIsInit.value && !initialValue.value) return {};\n        if (props.customGetQuery) return props.customGetQuery(checked.value, emptyToValue, props);\n        return props.fields?.length\n            ? props.fields.reduce(\n                  (p, v, i) => Object.assign(p, { [v]: emptyToValue(checked.value[i], props.emptyValue) }),\n                  {},\n              )\n            : {\n                  [props.field]: emptyToValue(\n                      props.emitPath ? [...checked.value] : checked.value.slice(-1)[0],\n                      props.emptyValue,\n                  ),\n              };\n    };\n    // 防止触发搜索时, query 产生变化内部重复赋值\n    const { flag: realtimeFlag, updateFlag: updateRealtimeFlag } = useDisableInCurrentCycle();\n    // 防止触发搜索时, `backfill` 产生变化内部重复赋值\n    const { flag: backfillFlag, updateFlag: updateBackfillFlag } = useDisableInCurrentCycle();\n\n    /** 需暴露给父级操作 */\n    const option = defineCommonMethod({\n        reset() {\n            updateRealtimeFlag();\n            updateBackfillFlag();\n            checked.value = (props.resetToInitialValue && initialValue.value?.slice()) || [];\n            return this;\n        },\n        get validator() {\n            return props.validator;\n        },\n        updateWrapperQuery() {\n            updateRealtimeFlag();\n            wrapper && Object.entries(getQuery()).forEach(([k, v]) => wrapper.updateQueryValue(k, v));\n        },\n        getQuery,\n    });\n\n    wrapper?.register(option);\n    const { insetDisabled, insetHide } = useDisplay(props, option);\n\n    const unwatchs: (() => void)[] = [];\n    onBeforeUnmount(() => unwatchs.forEach((v) => v()));\n\n    const sourceIsInit = ref(typeof props.getOptions !== 'function' || !!props.fields?.length);\n    watch(sourceIsInit, (val) => val && initCheckedInfo(), { immediate: true });\n    /** 设置初次选中的值以及初始值 */\n    function initCheckedInfo() {\n        const { backfill: BACKFILL, field: FIELD, fields: FIELDS } = props;\n        if (BACKFILL) {\n            // 存在回填值且回填值中对应字段为真\n            // 则设置回填值并不处理后续逻辑\n            if (FIELDS) {\n                const r = FIELDS.reduce((p, v) => {\n                    BACKFILL[v] && p.push(BACKFILL[v]);\n                    return p;\n                }, [] as string[]);\n                if (r.length) {\n                    checked.value = r;\n                    option.updateWrapperQuery();\n                    return;\n                }\n            } else if (BACKFILL[FIELD]) {\n                checked.value = insideGetChained(BACKFILL[FIELD]);\n                option.updateWrapperQuery();\n                return;\n            }\n        }\n        // 不存在回填值, 看是否存在初始值\n        // 存在设置默认值\n        if (initialValue.value?.length) {\n            checked.value =\n                typeof initialValue.value === 'string'\n                    ? insideGetChained(initialValue.value)\n                    : initialValue.value.slice();\n            typeof initialValue.value === 'string' && (initialValue.value = checked.value.slice());\n            option.updateWrapperQuery();\n        }\n    }\n\n    // 提交字段发生改变时, 删除原有字段并更新最新值\n    unwatchs.push(\n        watch(\n            () => props.fields || [props.field],\n            (val, oldVal) => {\n                val.toString() !== oldVal.toString() &&\n                    wrapper &&\n                    oldVal.forEach((o) => val.includes(o) || wrapper.removeUnreferencedField(o));\n\n                option.updateWrapperQuery();\n            },\n        ),\n    );\n    // 实时值发生变化时触发更新 - 共享同一个字段\n    unwatchs.push(\n        watch(\n            () =>\n                [\n                    props.fields?.toString() || props.field,\n                    props.fields?.map((v) => props.query[v]).filter(Boolean) || props.query[props.field],\n                ] as const,\n            ([_field, val], [__field, oldVal]) => {\n                // 仅在值发生变化时同步\n                if (_field !== __field || emptyValue2Str(val) === emptyValue2Str(oldVal)) return;\n                if (!realtimeFlag.value) return;\n                checked.value = typeof val === 'string' ? insideGetChained(val) : val;\n            },\n        ),\n    );\n    // 回填值发生变化时触发更新\n    unwatchs.push(\n        watch(\n            () =>\n                props.fields?.length\n                    ? props.fields.reduce((p, k) => {\n                          props.backfill?.[k] && p.push(props.backfill[k]);\n                          return p;\n                      }, [] as string[])\n                    : props.backfill?.[props.field],\n            (value: ValueType | ValueType[], oldVal: ValueType | ValueType[]) => {\n                if (!sourceIsInit.value) return;\n                if (emptyValue2Str(value) === emptyValue2Str(oldVal)) return;\n                updateBackfillFlag();\n                if (Array.isArray(value)) {\n                    updateCheckedValue(value);\n                } else {\n                    if (!value && value !== 0) {\n                        checked.value.length && (checked.value = []);\n                        return;\n                    }\n                    updateCheckedValue(insideGetChained(value));\n                }\n            },\n        ),\n    );\n    // 存在依赖项\n    unwatchs.push(\n        watch(\n            () =>\n                [\n                    props.depend,\n                    props.dependFields,\n                    (props.dependFields &&\n                        ([] as string[])\n                            .concat(props.dependFields)\n                            .map((k) => props.query?.[k])\n                            .join(',')) ||\n                        '',\n                ] as const,\n            ([_depend, _dependFields, val], [__depend, __dependFields, oldVal]) => {\n                if (!backfillFlag.value) return;\n                if (val === oldVal) return;\n                getOption('depend');\n                // 更新依赖条件时不做改动\n                if (_depend !== __depend || _dependFields?.toString() !== __dependFields?.toString()) return;\n                if (!checked.value.length) return;\n                updateCheckedValue(typeof checked.value === 'string' ? '' : []);\n            },\n        ),\n    );\n    unwatchs.push(watch(() => props.getOptions, getOption.bind(null, 'initial'), { immediate: true }));\n\n    /** 获取数据源发生变化事件 */\n    function getOption(trigger: 'initial' | 'depend') {\n        props.getOptions?.(\n            (data) => {\n                remoteOption.value = data || [];\n                sourceIsInit.value = true;\n            },\n            props.query || {},\n            {\n                trigger,\n                change: (value: any, isInitial?: boolean) => {\n                    isInitial && (initialValue.value = value);\n                    change(value);\n                },\n                search: (value: any, isInitial?: boolean) => {\n                    isInitial && (initialValue.value = value);\n                    updateCheckedValue(value);\n                    wrapper?.search();\n                },\n            },\n        );\n    }\n    /**\n     * 更新选中值(父级也同步更改)\n     * @param {ValueType | ValueType[]} values 待更改的值\n     */\n    function updateCheckedValue(values: ValueType[] | ValueType) {\n        const _checked = Array.isArray(values) ? values : insideGetChained(values);\n        if (_checked.join('') === checked.value.join('')) return;\n        checked.value = _checked;\n        option.updateWrapperQuery();\n    }\n    /**\n     * change 事件\n     * @param {Array} values 待更改的值\n     */\n    function change(values: ValueType[] | ValueType) {\n        updateCheckedValue(values || []);\n        wrapper?.insetSearch();\n    }\n    /**\n     * 根据提供的值获取其祖先(包括自身)\n     */\n    function insideGetChained(val: ValueType) {\n        if (!val && val !== 0) return [];\n        const { valueKey, childrenKey } = props;\n        return getChained(finalOption.value, (item) => item[valueKey] === val)\n            .map((v) => v[valueKey], childrenKey)\n            .filter(Boolean);\n    }\n\n    return {\n        wrapper,\n        option,\n        checked,\n        getQuery,\n        finalOption,\n        insetDisabled,\n        insetHide,\n        change,\n        reset: option.reset,\n    };\n}\n","import { PropType } from 'vue-demi';\nimport { commonProps, type GetOptions } from '../share';\n\n/** 树形条件类 props */\nexport const treeProps = {\n    ...commonProps,\n    /** 不同层级返回不同的字段(可能存在的字段, 不传初始不会回填数据) */\n    fields: { type: [Array] as PropType<string[]> },\n    /** 提交给后端的字段 */\n    valueKey: { type: String as PropType<string>, required: true },\n    /** 子级键名 - 默认 children */\n    childrenKey: { type: String as PropType<string> },\n    /** 是否返回选中项中所有的值(数组形式), 否只返回最后一项(基础类型) */\n    emitPath: { type: [Boolean] as PropType<boolean>, default: false },\n    /** 下拉选项的数据源 */\n    options: { type: Array as PropType<Record<string, any>[]>, default: () => [] },\n    /** 获取数据源 */\n    getOptions: { type: Function as PropType<GetOptions> },\n} as const;\n","import { del, getCurrentInstance, onBeforeUnmount, provide, ExtractPropTypes, ref, set, watch, toRefs } from 'vue-demi';\nimport { IS_COMPOSITION_VERSION, provideKey, ProvideValue, CommonMethod, defineProvideValue } from '../constant';\nimport { wrapperProps } from './props';\n\n/** 外部需传递的 props */\nexport type WrapperProps = ExtractPropTypes<typeof wrapperProps> & {\n    /** 触发搜索事件 */\n    search?: (params: Record<string, any>) => void;\n    /** 触发重置事件 */\n    reset?: (params: Record<string, any>) => void;\n};\n\n/** 封装 wrapper 组件必备的信息 */\nexport function useWrapper(props: WrapperProps) {\n    const child: CommonMethod[] = [];\n    onBeforeUnmount(() => child.splice(0));\n\n    /**\n     * #fix 修复初始 backfill 存在值时\n     * query 未保持一致的问题\n     * 解决方案:\n     * query 本身逻辑和作用不变\n     * 新增一个对象用来缓存更改的值\n     * 并在获取 query 时, 将该对象作为\n     * 最后一个合并项\n     */\n    const changedQueryObj = {} as Record<string, any>;\n    /** 是否标记更新的字段, 防止卸载后的空字段占位 */\n    let isLogField = false;\n    let logFields: string[] = [];\n    /** 提供给子条件组件的方法 */\n    const wrapperInstance = defineProvideValue({\n        realtime: ref(props.realtime),\n        register(compOption) {\n            child.push(compOption);\n            const unregister = () => {\n                isLogField = true;\n                compOption.reset();\n                compOption.updateWrapperQuery();\n                const idx = child.indexOf(compOption);\n                idx !== -1 && child.splice(idx, 1);\n                props.searchAtDatumChanged && search();\n                // TODO 不确定的一点, 数据源更改后是否需要重置整个数据\n                // 如果需要重置, 得更新后第一次搜索事件时传递的搜索值\n                isLogField = false;\n                logFields.forEach((k) => {\n                    del(query.value, k);\n                    delete changedQueryObj[k];\n                });\n                logFields = [];\n            };\n            const childInstance = getCurrentInstance();\n            // vue2.7 实例挂载在 proxy 上, 内部逻辑取的 proxy 上的值\n            // 虽然 @vue/composition-api 实例挂载在 proxy 上\n            // 但是内部逻辑取的是整个 getCurrentInstance\n            // @ts-expect-error vue2.7中取proxy属性\n            childInstance && onBeforeUnmount(unregister, IS_COMPOSITION_VERSION ? childInstance.proxy : childInstance);\n            return unregister;\n        },\n        updateQueryValue(field, value) {\n            if (isLogField) logFields.push(field);\n            set(query.value, field, value);\n            changedQueryObj[field] = value;\n        },\n        insetSearch() {\n            props.realtime && search();\n        },\n        search,\n        removeUnreferencedField(field: string) {\n            let sameFieldCount = 0;\n            child.some((v) => {\n                v.getQuery().hasOwnProperty(field) && (sameFieldCount += 1);\n                return sameFieldCount;\n            });\n            if (!sameFieldCount) {\n                del(query.value, field);\n                delete changedQueryObj[field];\n            }\n        },\n    });\n    provide<ProvideValue>(provideKey, wrapperInstance);\n\n    /** 内部条件最新的值, 在没触发搜索按钮前, 不会同步到外部 */\n    const query = ref<Record<string, string>>({ ...props.backfill });\n    const getQuery = () => ({ ...query.value, ...props.backfill, ...changedQueryObj });\n\n    async function search() {\n        const msg = await validate();\n        msg ? props.toast?.(msg) : props.search?.(getQuery());\n    }\n    /** 重置所有条件的值 */\n    function reset() {\n        child.forEach((v) => {\n            v.reset();\n            v.updateWrapperQuery();\n        });\n        props.reset?.(getQuery());\n    }\n    /** 自定义校验条件的值 */\n    async function validate() {\n        const r = await Promise.all(child.map((v) => v.validator?.(query.value)));\n        return r.find((v) => v && typeof v === 'string') as string;\n    }\n\n    return {\n        child,\n        wrapperInstance,\n        query,\n        getQuery,\n        search,\n        reset,\n        validate,\n    };\n}\n"],"names":["IS_COMPOSITION_VERSION","version","slice","provideKey","defineProvideValue","option","defineCommonMethod","wrapperProps","realtime","type","Boolean","default","undefined","searchAtDatumChanged","backfill","Object","toast","Function","emptyToValue","val","defaultVal","Array","isArray","filter","length","getChained","data","cb","childrenKey","item","r","unshift","useInitialValue","props","setValue","ref","computed","set","value","get","defaultValue","query","useDisplay","insetDisabled","disabled","insetHide","hide","getOption","listeners","watch","immediate","deep","val2","onBeforeUnmount","forEach","o","useDisableInCurrentCycle","initialValue","flag","updateFlag","nextTick","emptyValue2Str","toString","commonProps","field","String","required","depend","dependFields","resetToInitialValue","emptyValue","Number","validator","customGetQuery","plainProps","fields","backfillToValue","v","multiple","options","getOptions","treeProps","valueKey","emitPath","node","args","markRaw","wrapper","inject","initialBackfillValue","map","key","checked","remoteOption","finalOption","getQuery","reduce","p","k","i","realtimeFlag","updateRealtimeFlag","backfillFlag","updateBackfillFlag","reset","updateWrapperQuery","entries","updateQueryValue","register","unwatchs","trigger","_checked","change","isInitial","search","updateCheckedValue","insetSearch","push","oldVal","removeUnreferencedField","_field","__field","_val","concat","join","_depend","_dependFields","__depend","__dependFields","bind","sourceIsInit","assign","this","values","insideGetChained","BACKFILL","FIELD","FIELDS","initCheckedInfo","includes","child","splice","changedQueryObj","isLogField","logFields","wrapperInstance","compOption","unregister","idx","indexOf","del","childInstance","getCurrentInstance","proxy","sameFieldCount","some","hasOwnProperty","provide","async","msg","validate","Promise","all","find"],"mappings":"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"}